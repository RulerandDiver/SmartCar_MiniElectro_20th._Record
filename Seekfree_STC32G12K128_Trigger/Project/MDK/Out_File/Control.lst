C251 COMPILER V5.60.0,  Control                                                            05/06/25  10:01:29  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Control
OBJECT MODULE PLACED IN .\Out_File\Control.obj
COMPILER INVOKED BY: E:\Kust-Travel\Keil_v5\C251\BIN\C251.EXE ..\CODE\Control.c LARGE INTR2 FLOAT64 WARNINGLEVEL(3) OPTI
                    -MIZE(0,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_periph
                    -eral;..\CODE;..\USER\inc;..\USER\src;..\..\Libraries\seekfree_components) DEBUG PRINT(.\Out_File\Control.lst) OBJECT(.\O
                    -ut_File\Control.obj) 

stmt  level    source

    1          #include "Control.h"
    2          
    3          PID Left_MOTOR_PID, Right_MOTOR_PID, Turn_PID_ele;  // 三个结构体变量
    4          
    5          unsigned char run = 0;  // 电机启停标志位
    6          
    7          
    8          int16 adc_max[5] = {3560,3555,3560,3570,3570}; 
    9          int16 adc_min[5] = {88,4,1,6,83}; 
   10          
   11          /*电感*/
   12          //short data 不能extern后在其他文件调用.比如oled显示时，不能如此使用
   13          int16 L=0, L2=0, M=0, R2=0, R=0;
   14          double eleValue=0;      // 差比和
   15          double eleOut = 0;              
   16          uint8 Left_Vector=0,Right_Vector=0;
   17          int16 eleSum=0,eleDiff=0;
   18          
   19          /*电压*/
   20          uint16 Bat_Vol=0;
   21          /*转向环*/
   22          //double  Turn_ele[4]={4.1 , 0.03 , 0 , 0};//KP,GKD,KP2,KD      
   23          double  Turn_ele[4]={3.3 , 0.02 , 0.01 , 0};//KP,GKD,KP2,KD     
   24                                  
   25          
   26          /*速度环*/
   27          double Left_MOTOR[3] =  {80, 1, 0};   
   28          double Right_MOTOR[3] = {80, 1, 0};  
   29          
   30          /*电机和编码器*/
   31          double encoder_L, encoder_R;                                                    
   32          double LEFT_MOTOR_Duty, RIGHT_MOTOR_Duty;                               
   33          double Left_High_Speed=0, Right_High_Speed=0;
   34          
   35          /*编码器积分*/
   36          bit Encoder_Int=0;
   37          double Distance=0,Distance_Int=0;
   38          
   39          /*陀螺仪积分*/
   40          bit Gyro_Int=0;
   41          float Gyro_z=0;
   42          
   43          /*苯环*/
   44          short data youhuandao_flag1=0,youhuandao_flag2_s=0,youhuandao_flag3_s=0,youhuandaoleijia=0;
   45          
   46          
   47          /**********************************按键检测变量******************************************/
   48          //拨码开关状态变量
   49          uint8 sw1_status;
   50          uint8 sw2_status;
   51          
   52          //开关状态变量
   53          uint8 key1_status = 1;
   54          uint8 key2_status = 1;
   55          uint8 key3_status = 1;
   56          uint8 key4_status = 1;
C251 COMPILER V5.60.0,  Control                                                            05/06/25  10:01:29  PAGE 2   

   57          
   58          //上一次开关状态变量
   59          uint8 key1_last_status;
   60          uint8 key2_last_status;
   61          uint8 key3_last_status;
   62          uint8 key4_last_status;
   63          
   64          //开关标志位
   65          uint8 key1_flag;
   66          uint8 key2_flag;
   67          uint8 key3_flag;
   68          uint8 key4_flag;
   69          
   70          uint8 running=0;
   71          /*****************************************************************************************************/
   72          /**
   73           * @brief 限幅保护函数
   74           */
   75          double range_protect(double duty, double min, double max)
   76          {
   77   1          return duty >= max ? max : (duty <= min ? min : duty);
   78   1      }
   79          
   80          
   81          /**
   82           * @brief 电机控制函数，实现左右轮速度闭环控制
   83           */
   84          void Motor_Control()
   85          {
   86   1              // 编码器数据在屏幕上已经显示，一定要核对确认：①左右不要搞反  ②正负不要搞反
   87   1              encoder_L = Read_Encoder(En_L);  // 左编码器
   88   1              encoder_R = Read_Encoder(En_R)*0.5;   // 右编码器
   89   1              
   90   1              //陀螺仪Z轴获取
   91   1              mpu6050_get_gyro();
   92   1              
   93   1              /* 采集各通道电感值 */
   94   1              ADC_Measure();
   95   1      
   96   1              /* 差比和计算赛道偏差 */
   97   1              if(youhuandao_flag2_s == 1) eleValue = 50;
   98   1              else if(youhuandao_flag3_s == 1) eleValue = 10;//防止出圆环多走
   99   1              //基础差比和循迹
  100   1      //      else    eleValue = ((L - R) + (L2 - R2))*100/(L + R + L2 + R2 + 1);     // 差比和の分子
  101   1              else eleValue = (eleDiff * 100) / (eleSum + 1);//计算差比和数值 并放大
  102   1      
  103   1              eleOut = Loc_pid(&Turn_PID_ele,eleValue,Turn_ele); //位置环
  104   1              
  105   1      
  106   1              //实际调节后速度减去实际调节后位置偏差减去一绝对值（抑制弯道）
  107   1      //      LEFT_MOTOR_Duty  += PID_Realize(&Left_MOTOR_PID, encoder_L, Left_High_Speed-eleOut-absolute(eleOut*0.5
             -), Left_MOTOR);
  108   1      //      RIGHT_MOTOR_Duty += PID_Realize(&Right_MOTOR_PID, encoder_R, Right_High_Speed+eleOut-absolute(eleOut*0
             -.5), Right_MOTOR);
  109   1              
  110   1              LEFT_MOTOR_Duty  += PID_Realize(&Left_MOTOR_PID, encoder_L, Left_High_Speed-eleOut, Left_MOTOR);
  111   1              RIGHT_MOTOR_Duty += PID_Realize(&Right_MOTOR_PID, encoder_R, Right_High_Speed+eleOut, Right_MOTOR);
  112   1      
  113   1      //      Left_High_Speed  = 65;
  114   1      //      Right_High_Speed = 65;
  115   1      //      LEFT_MOTOR_Duty  += PID_Realize(&Left_MOTOR_PID, encoder_L, Left_High_Speed, Left_MOTOR);
  116   1      //      RIGHT_MOTOR_Duty += PID_Realize(&Right_MOTOR_PID, encoder_R, Right_High_Speed, Right_MOTOR);
  117   1      
  118   1      
  119   1              if(LEFT_MOTOR_Duty>0)
  120   1              {
C251 COMPILER V5.60.0,  Control                                                            05/06/25  10:01:29  PAGE 3   

  121   2                              LEFT_MOTOR_Duty = range_protect(LEFT_MOTOR_Duty, 0, MOTOR_MAX);
  122   2              }
  123   1              else
  124   1              {
  125   2                              LEFT_MOTOR_Duty = range_protect(LEFT_MOTOR_Duty, -MOTOR_MAX, 0);
  126   2              }
  127   1      
  128   1              if(RIGHT_MOTOR_Duty>0)
  129   1              {
  130   2                              RIGHT_MOTOR_Duty = range_protect(RIGHT_MOTOR_Duty, 0, MOTOR_MAX);
  131   2              }
  132   1              else
  133   1              {
  134   2                              RIGHT_MOTOR_Duty = range_protect(RIGHT_MOTOR_Duty, -MOTOR_MAX, 0);
  135   2              }
  136   1              
  137   1      
  138   1              Motor_Ctrl((int16)LEFT_MOTOR_Duty,-(int16)RIGHT_MOTOR_Duty);
  139   1      //      Motor_Ctrl(0,-900);
  140   1      }
  141          
  142          
  143          /**
  144           * @brief 综合控制函数，在中断中调用
  145           */
  146          void Ultima_Control()
  147          {
  148   1      //      huandao();
  149   1      //      if(Encoder_Int)
  150   1      //      {
  151   1      //              Distance += encoder_L;
  152   1      //              Distance_Int = Distance/80;//编码器脉冲数除以实际距离 cm
  153   1      //      }
  154   1      //      if(Gyro_Int)
  155   1      //      {
  156   1      //              Gyro_z += (mpu6050_gyro_z - 15)*0.00064;//0.00064     360° 除以 陀螺仪轴记 
  157   1      //      }
  158   1              //Dir_Control();  // 转向控制
  159   1              Motor_Control();  //电机控制
  160   1              //KEY_Scan();//按键检测
  161   1              Key_Pro();
  162   1      }
  163          
  164          /**
  165           * @brief 循迹电感测量
  166           */
  167          void ADC_Measure()
  168          {
  169   1              L  = ADC_Median_Average(ADC_P10);       
  170   1              L2 = ADC_Median_Average(ADC_P17);       
  171   1              M  = ADC_Median_Average(ADC_P03);               
  172   1              R2 = ADC_Median_Average(ADC_P01);       
  173   1              R  = ADC_Median_Average(ADC_P02);               
  174   1      
  175   1              L   = (float)(L - adc_min[0])   / (adc_max[0] - adc_min[0])* 100.0f;    //最大值最小值需要经过拟合，而不
             -是简单的根据直道最值敲定
  176   1              L2  = (float)(L2 - adc_min[1])  / (adc_max[1] - adc_min[1])* 100.0f;
  177   1              M   = (float)(M - adc_min[2])   / (adc_max[2] - adc_min[2])* 100.0f;     
  178   1              R2  = (float)(R2 - adc_min[3])  / (adc_max[3] - adc_min[3])* 100.0f;
  179   1              R   = (float)(R - adc_min[4])   / (adc_max[4] - adc_min[4])* 100.0f;     
  180   1      
  181   1              L =  (L < 0)   ? 0   : L;
  182   1              L =  (L > 100) ? 100 : L;
  183   1              L2 = (L2 < 0)   ? 0   : L2;
  184   1              L2 = (L2 > 100) ? 100 : L2;     
  185   1              M =  (M < 0)   ? 0   : M;
C251 COMPILER V5.60.0,  Control                                                            05/06/25  10:01:29  PAGE 4   

  186   1              M =  (M > 100) ? 100 : M;
  187   1              R2 = (R2 < 0)   ? 0   : R2;
  188   1              R2 = (R2 > 100) ? 100 : R2;
  189   1              R =  (R < 0)   ? 0   : R;
  190   1              R =  (R > 100) ? 100 : R;       
  191   1              
  192   1              Left_Vector  = Fun_Limit_ab(sqrt(L * L + L2 * L2),0,100);
  193   1              Right_Vector = Fun_Limit_ab(sqrt(R * R + R2 * R2),0,100);
  194   1              eleSum  = Left_Vector + Right_Vector;
  195   1              eleDiff = Left_Vector - Right_Vector;
  196   1              
  197   1      }
  198          
  199          void huandao(void)
  200          { 
  201   1              if(M>80 && youhuandaoleijia==0)   P64=0,youhuandaoleijia=1,youhuandao_flag1=1,Encoder_Int=1;
  202   1              if(youhuandaoleijia==1 && youhuandao_flag1==1 && Distance_Int>35)               
  203   1              {
  204   2                      
  205   2                      if(M>0 ) //加辅助判断调节，防止与十字误识别，即1 5电感
  206   2                              P64=1,youhuandao_flag1=0,Gyro_Int=1,Encoder_Int=0,Distance=0,Distance_Int=0,youhuandao_flag2_s=1;     
             -                              
  207   2                      else                                    youhuandaoleijia=0,youhuandao_flag1=0,Encoder_Int=0,Distance=0,Distance_Int=0;    
  208   2              }                       
  209   1          if(youhuandaoleijia==1 && youhuandao_flag2_s==1 && Gyro_z<-21) P64=0,youhuandao_flag2_s=0;
  210   1              
  211   1                if(youhuandaoleijia==1 && Gyro_z!=0) 
  212   1                {
  213   2                      if(Gyro_z<-290 && Gyro_z>-300)  youhuandao_flag3_s=1;
  214   2                      if(Gyro_z<-300)                                                           youhuandao_flag3_s=0,youhuandao_flag1=1,Encoder_Int=1,Gyro_Int=0,Gyro_z=0;    
             -    
  215   2                }             
  216   1      //防止出圆环时 再次识别到圆环     
  217   1                if(youhuandaoleijia==1 && Gyro_z==0) 
  218   1                      {
  219   2                              if(Distance_Int>40)  youhuandao_flag1=0,youhuandaoleijia=0,Encoder_Int=0,Distance=0,Distance_Int=0;   
             -            
  220   2                      }
  221   1      }
  222          
  223          
  224          void Key_Pro()
  225          {
  226   1              static uint16 Voltage_Count=0;
  227   1              static bit Voltage_Flag=0;
  228   1              
  229   1              enum KeyValue key = Key_Single_Double(60);
  230   1              //外侧上拨启动
  231   1              if(sw1_status)
  232   1              {
  233   2                      Test_Wireless_Oscilloscope();//无线转串口调试PID                
  234   2              }
  235   1              if(sw2_status)
  236   1              {       
  237   2                      //电压检测
  238   2                      if(++Voltage_Count == 100) Voltage_Count=0,Voltage_Flag=1;//不能太快，会让单片机挂掉
  239   2                      if(Voltage_Flag)
  240   2                      {
  241   3                              Voltage_Flag=0;
  242   3                              Bat_Vol = ADC_Voltage();
  243   3                      }
  244   2              }
  245   1              if(!sw2_status) Bat_Vol=0;
  246   1              
  247   1              if( key == Down_Test )
  248   1              {
C251 COMPILER V5.60.0,  Control                                                            05/06/25  10:01:29  PAGE 5   

  249   2                      key2_flag=0;
  250   2                      Encoder_Int = 1;
  251   2                      P64 = ~P64;
  252   2              }
  253   1              if( key == Down_Long )
  254   1              {
  255   2                      Gyro_Int = 1;
  256   2                      P65 = ~P65;
  257   2              }
  258   1              
  259   1              if( key == Down_Long && running == 0)
  260   1              {
  261   2                      running = 1;
  262   2                      
  263   2              }
  264   1              /* 冲出赛道保护 */
  265   1              if(L<1 && L2<1 && R2<1 && R<1)run=0;
  266   1              else run=1;
  267   1              
  268   1              /* 速度设置 & 差速计算 */
  269   1              if(run == 1 && running == 1)  // 在赛道内
  270   1              {       
  271   2                      Left_High_Speed  = 80;
  272   2                      Right_High_Speed = 80   ;
  273   2              }
  274   1              if(run == 0 && running == 1) // 出赛道 进入保护,编码器计步代替延时，计步一段距离，若仍然丢线，则停车，后
             -期补上，前期无需停车
  275   1              {
  276   2                      Left_High_Speed  = 0;
  277   2                      Right_High_Speed = 0;
  278   2                      eleOut=0;               
  279   2              }
  280   1      }
  281          
  282          
  283          float absolute(float error2){
  284   1              float real_error2;
  285   1              if(error2>0)  real_error2= error2;
  286   1              else          real_error2=-error2;
  287   1              return real_error2;
  288   1      }
  289          
  290          /**
  291           * @brief 位置式 PD（用于转向控制）
  292           */
  293          double Loc_pid(PID*sptr,double error,double *Turn_PID)
  294          {
  295   1              double Loc_out;
  296   1              
  297   1               
  298   1              sptr->KP   = *Turn_PID;  // 参数赋值
  299   1              sptr->GKD  = *(Turn_PID+1);
  300   1              sptr->KP2  = *(Turn_PID+2);
  301   1              sptr->KD   = *(Turn_PID+3);
  302   1              
  303   1              Loc_out = error * sptr->KP 
  304   1                          - mpu6050_gyro_z * sptr->GKD 
  305   1                              + error*absolute(error)*sptr->KP2 
  306   1                              + (error - sptr->LastError)*sptr->KD;
  307   1              
  308   1              sptr->LastError = error; 
  309   1              return Loc_out;
  310   1      }
  311          
  312          
  313          
C251 COMPILER V5.60.0,  Control                                                            05/06/25  10:01:29  PAGE 6   

  314          /**
  315           * @brief 增量式 PID（用于左右轮电机闭环控制）
  316           */
  317          double PID_Realize(PID*sptr, double ActualSpeed, double SetSpeed, double *MOTOR_PID)
  318          {
  319   1              double Increase;  // 单次PID输出
  320   1              
  321   1              sptr->KP = *MOTOR_PID;  // 参数赋值
  322   1              sptr->KI = *(MOTOR_PID+1);
  323   1              sptr->KD = *(MOTOR_PID+2);
  324   1      
  325   1              sptr->iError = SetSpeed - ActualSpeed;  // 当前误差 = 目标值 - 实际值
  326   1      
  327   1              Increase = sptr->KP * (sptr->iError - sptr->LastError)
  328   1                               + sptr->KI * sptr->iError
  329   1                               + sptr->KD * (sptr->iError - 2*sptr->LastError + sptr->PrevError);
  330   1      
  331   1              sptr->PrevError = sptr->LastError;  // 让上上次等于上次
  332   1              sptr->LastError = sptr->iError;  // 让上次等于这次
  333   1      
  334   1              return Increase;
  335   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      4551     ------
  ecode size           =    ------     ------
  data size            =         2     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       454     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =         3     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       344     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
