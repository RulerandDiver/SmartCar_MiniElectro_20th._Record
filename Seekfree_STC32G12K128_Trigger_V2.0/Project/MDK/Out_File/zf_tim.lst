C251 COMPILER V5.60.0,  zf_tim                                                             21/06/25  13:58:57  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_tim
OBJECT MODULE PLACED IN .\Out_File\zf_tim.obj
COMPILER INVOKED BY: E:\Kust-Travel\Keil_v5\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_tim.c LARGE INTR2 FL
                    -OAT64 WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..
                    -\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\src;..\..\Libraries\seekfree_components) DEBUG PRINT(.\Out_Fi
                    -le\zf_tim.lst) OBJECT(.\Out_File\zf_tim.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file                ctime
   11           * @company                     成都逐飞科技有限公司
   12           * @author              逐飞科技(QQ790875685)
   13           * @version             查看doc内version文件 版本说明
   14           * @Software            MDK FOR C251 V5.60
   15           * @Target core         STC32G12K128
   16           * @Taobao              https://seekfree.taobao.com/
   17           * @date                2020-4-14
   18           ********************************************************************************************************
             -************/
   19          
   20          
   21          #include "zf_tim.h"
   22          #include "board.h"
   23          
   24          
   25          //-------------------------------------------------------------------------------------------------------
             -------------
   26          //  @brief      定时器初始化作为外部计数
   27          //  @param      tim_n           选择模块
   28          //  @return     void
   29          //  @since      v1.0
   30          //  Sample usage:               ctimer_count_init(CTIM0_P34);           //初始化定时器0，外部输入为P3.4引脚
   31          //  @note                       串口1使用定时器1作为波特率发生器，
   32          //                                                              串口2使用定时器2作为波特率发生器，
   33          //                                                              串口3使用定时器3作为波特率发生器，
   34          //                                                              串口4使用定时器4作为波特率发生器，
   35          //                              STC16F仅有定时器0-定时器4，这5个定时器。
   36          //                                                              编码器采集数据也需要定时器作为外部计数。
   37          //-------------------------------------------------------------------------------------------------------
             -------------
   38          void ctimer_count_init(CTIMN_enum tim_n)
   39          {
   40   1      
   41   1              switch(tim_n)
   42   1              {
   43   2                      case CTIM0_P34:
   44   2                      {
   45   3                              TL0 = 0; 
   46   3                              TH0 = 0; 
   47   3                              TMOD |= 0x04; //外部计数模式
   48   3                              TR0 = 1; //启动定时器
   49   3                              break;
   50   3                      }
   51   2                      
   52   2                      case CTIM1_P35:
C251 COMPILER V5.60.0,  zf_tim                                                             21/06/25  13:58:57  PAGE 2   

   53   2                      {
   54   3                              TL1 = 0x00;
   55   3                              TH1 = 0x00;
   56   3                              TMOD |= 0x40; // 外部计数模式
   57   3                              TR1 = 1; // 启动定时器
   58   3                              break;
   59   3                      }
   60   2                      
   61   2                      case CTIM2_P12:
   62   2                      {
   63   3                              T2L = 0x00;
   64   3                              T2H = 0x00;
   65   3                              AUXR |= 0x18; // 设置外部计数模式并启动定时器
   66   3                              break;
   67   3                      }
   68   2                      
   69   2                      case CTIM3_P04:
   70   2                      {
   71   3                              T3L = 0; 
   72   3                              T3H = 0;
   73   3                              T4T3M |= 0x0c; // 设置外部计数模式并启动定时器
   74   3                              break;
   75   3                      }
   76   2                      
   77   2                      case CTIM4_P06:
   78   2                      {
   79   3                              T4L = 0;
   80   3                              T4H = 0;
   81   3                              T4T3M |= 0xc0; // 设置外部计数模式并启动定时器
   82   3                              break;
   83   3                      }
   84   2              
   85   2              }       
   86   1      } 
   87          
   88          //-------------------------------------------------------------------------------------------------------
             -------------
   89          //  @brief      获取计数数值
   90          //  @param      countch     计数通道号及引脚
   91          //  @return     uint32      返回计数值
   92          //  Sample usage:           num = ctimer_count_read(CTIM0_P34);     
   93          //-------------------------------------------------------------------------------------------------------
             -------------
   94          uint16 ctimer_count_read(CTIMN_enum tim_n)
   95          {
   96   1              uint16 dat = 0;
   97   1              
   98   1              switch(tim_n)
   99   1              {
  100   2                      case CTIM0_P34:
  101   2                      {
  102   3                              dat = (uint16)TH0 << 8;
  103   3                              dat = ((uint8)TL0) | dat;
  104   3                              break;
  105   3                      }
  106   2                      case CTIM1_P35:
  107   2                      {
  108   3                              dat = (uint16)TH1 << 8;
  109   3                              dat = ((uint8)TL1) | dat;
  110   3                              break;
  111   3                      }
  112   2                      case CTIM2_P12:
  113   2                      {
  114   3                              dat = (uint16)T2H << 8;
  115   3                              dat = ((uint8)T2L) | dat;
  116   3                              break;
C251 COMPILER V5.60.0,  zf_tim                                                             21/06/25  13:58:57  PAGE 3   

  117   3                      }
  118   2                      case CTIM3_P04:
  119   2                      {
  120   3                              dat = (uint16)T3H << 8;
  121   3                              dat = ((uint8)T3L) | dat;       
  122   3                              break;
  123   3                      }
  124   2                      case CTIM4_P06:
  125   2                      {
  126   3                              dat = (uint16)T4H << 8;
  127   3                              dat = ((uint8)T4L) | dat;
  128   3                              break;
  129   3                      }
  130   2                      
  131   2              }
  132   1              return dat;
  133   1      }
  134          
  135          
  136          //-------------------------------------------------------------------------------------------------------
             -------------
  137          //  @brief      清除计数数值
  138          //  @param      countch     计数通道号及引脚
  139          //  @return     void      
  140          //  Sample usage:           ctimer_count_clean(CTIM0_P34);     
  141          //-------------------------------------------------------------------------------------------------------
             -------------
  142          void ctimer_count_clean(CTIMN_enum tim_n)
  143          {       
  144   1              switch(tim_n)
  145   1              {
  146   2                      case CTIM0_P34:
  147   2                      {
  148   3                              TR0 = 0;
  149   3                              TH0 = 0;
  150   3                              TL0 = 0;
  151   3                              TR0 = 1;
  152   3                              break;
  153   3                      }
  154   2                      case CTIM1_P35:
  155   2                      {
  156   3                              TR1 = 0;
  157   3                              TH1 = 0;
  158   3                              TL1 = 0;
  159   3                              TR1 = 1;
  160   3                              break;
  161   3                      }
  162   2                      case CTIM2_P12:
  163   2                      {
  164   3                              AUXR &= ~(1<<4);
  165   3                              T2H = 0;
  166   3                              T2L = 0;
  167   3                              AUXR |= 1<<4;
  168   3                              break;
  169   3                      }
  170   2                      case CTIM3_P04:
  171   2                      {
  172   3                              T4T3M &= ~(1<<3);
  173   3                              T3H = 0;
  174   3                              T3L = 0;
  175   3                              T4T3M |= (1<<3);
  176   3                              break;
  177   3                      }
  178   2                      case CTIM4_P06:
  179   2                      {
  180   3                              T4T3M &= ~(1<<7);
C251 COMPILER V5.60.0,  zf_tim                                                             21/06/25  13:58:57  PAGE 4   

  181   3                              T4H = 0;
  182   3                              T4L = 0;
  183   3                              T4T3M |= (1<<7);
  184   3                              break;
  185   3                      }
  186   2              }
  187   1      }
  188          
  189          //-------------------------------------------------------------------------------------------------------
             -------------
  190          //  @brief      定时器周期中断
  191          //  @param      tim_n      定时器通道号
  192          //  @param      time_ms    时间(ms)
  193          //  @return     void      
  194          //  Sample usage:          pit_timer_ms(TIM_0, 10)
  195          //                                                 使用定时器0做周期中断，时间10ms一次。
  196          //-------------------------------------------------------------------------------------------------------
             -------------
  197          void pit_timer_ms(TIMN_enum tim_n,uint16 time_ms)
  198          {
  199   1              uint16 temp;
  200   1              temp = (uint16)65536 - (uint16)(sys_clk / (12 * (1000 / time_ms)));
  201   1              
  202   1              if(TIM_0 == tim_n)
  203   1              {
  204   2                      TMOD |= 0x00;   // 模式 0
  205   2                      TL0 = temp;     
  206   2                      TH0 = temp >> 8;
  207   2                      TR0 = 1;                // 启动定时器
  208   2                      ET0 = 1;                // 使能定时器中断
  209   2              }
  210   1              else if(TIM_1 == tim_n)
  211   1              {
  212   2                      TMOD |= 0x00; // 模式 0
  213   2                      TL1 = temp;     
  214   2                      TH1 = temp >> 8;
  215   2                      TR1 = 1; // 启动定时器
  216   2                      ET1 = 1; // 使能定时器中断
  217   2                      
  218   2              }
  219   1              else if(TIM_2 == tim_n)
  220   1              {
  221   2                      T2L = temp;     
  222   2                      T2H = temp >> 8;
  223   2                      AUXR |= 0x10; // 启动定时器
  224   2                      IE2 |= 0x04; // 使能定时器中断
  225   2              }
  226   1              else if(TIM_3 == tim_n)
  227   1              {
  228   2                      T3L = temp;     
  229   2                      T3H = temp >> 8;
  230   2                      T4T3M |= 0x08; // 启动定时器
  231   2                      IE2 |= 0x20; // 使能定时器中断
  232   2                      
  233   2              }
  234   1              else if(TIM_4 == tim_n)
  235   1              {
  236   2                      T4L = temp;     
  237   2                      T4H = temp >> 8;
  238   2                      T4T3M |= 0x80; // 启动定时器
  239   2                      IE2 |= 0x40; // 使能定时器中断
  240   2              }
  241   1      }
  242          
  243          
  244          int g_encoleft_init = 0, g_encoright_init = 0;
C251 COMPILER V5.60.0,  zf_tim                                                             21/06/25  13:58:57  PAGE 5   

  245          int g_EncoderLeft = 0, g_EncoderRight = 0, g_EncoderAverage = 0;
  246          int g_intencoderALL = 0, g_intencoderL = 0, g_intencoderR = 0;
  247          
  248          Encoder_tt EncoderL, EncoderR;
  249          
  250          static int I_abs(int num)
  251          {
  252   1              return (num > 0 ? num : -num);
  253   1      }
  254          
  255          void Encoder_Init()
  256          {
  257   1              ctimer_count_init(CTIM4_P06);//Encoder
  258   1              ctimer_count_init(CTIM3_P04);
  259   1              
  260   1              EncoderL.encoderlast = 0;
  261   1              EncoderL.count = 0;
  262   1              
  263   1              EncoderR.encoderlast = 0;
  264   1              EncoderR.count = 0;
  265   1      }
  266          
  267          int get_left_encoder(void)
  268          {
  269   1              int encoder_left;
  270   1              
  271   1              if(LEFT_DIR == 1)
  272   1              {
  273   2                      encoder_left = ctimer_count_read(CTIM4_P06);
  274   2              }
  275   1              else
  276   1              {
  277   2                      encoder_left = ctimer_count_read(CTIM4_P06) * -1;
  278   2              }
  279   1              
  280   1              ctimer_count_clean(CTIM0_P34);
  281   1              
  282   1              return encoder_left;
  283   1      }
  284          
  285          int get_right_encoder(void)
  286          {
  287   1              int encoder_right;
  288   1              
  289   1              if(RIGHT_DIR == 1)
  290   1              {
  291   2                      encoder_right = ctimer_count_read(CTIM3_P04) * -1;
  292   2              }
  293   1              else
  294   1              {
  295   2                      encoder_right = ctimer_count_read(CTIM3_P04);
  296   2              }
  297   1              
  298   1              ctimer_count_clean(CTIM3_P04);
  299   1              
  300   1              return encoder_right;
  301   1      }
  302          
  303          //编码器去抖动
  304          int encoder_debounce(Encoder_tt* instance, int encoder)
  305          {
  306   1              // 检测异常跳变,当检测到当前值与上次值差异过大(>20)且连续稳定计数达到5次时，认为当前值是干扰
  307   1              if (I_abs(encoder - instance->encoderlast) > 20 && instance->count >= 5)
  308   1              {
  309   2                      // 认为是干扰，使用上次值
  310   2                      encoder = instance->encoderlast;
C251 COMPILER V5.60.0,  zf_tim                                                             21/06/25  13:58:57  PAGE 6   

  311   2                      instance->count = 0;
  312   2              }
  313   1              else
  314   1              {
  315   2                      // 更新上次值
  316   2                      instance->encoderlast = encoder;
  317   2                      
  318   2                      // 更新计数器（防溢出）
  319   2                      instance->count++;
  320   2                      if (instance->count >= 10000)
  321   2                      {
  322   3                              instance->count = 0;
  323   3                      }
  324   2              }
  325   1              
  326   1              return encoder;
  327   1      }
  328          
  329          
  330          
  331          
  332          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1081     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        50     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        56     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
